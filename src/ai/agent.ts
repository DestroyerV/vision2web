import { google } from "@ai-sdk/google";
import { generateText } from "ai";
import { Sandbox } from "e2b";
import { PROMPT } from "@/prompt";
import { prisma } from "@/lib/db";

interface AgentState {
  summary: string;
  files: { [path: string]: string };
}

interface AgentResult {
  url: string;
  title: string;
  files: { [path: string]: string };
  summary: string;
}

export async function runCodeAgent(
  input: string,
  projectId?: string
): Promise<AgentResult> {
  // Create E2B sandbox
  const sandbox = await Sandbox.create("vision2web");

  // Initialize agent state
  const agentState: AgentState = {
    summary: "",
    files: {},
  };

  // For now, let's use a simpler approach without complex tool handling
  // We can improve this later with proper tool integration
  const result = await generateText({
    model: google("gemini-2.0-flash-exp"),
    messages: [
      {
        role: "system",
        content: PROMPT,
      },
      {
        role: "user",
        content: input,
      },
    ],
  });

  // For now, just use the text result as summary
  agentState.summary = result.text;

  // Create a simple example file to demonstrate functionality
  const exampleContent = `<!DOCTYPE html>
<html>
<head>
    <title>Generated by AI</title>
</head>
<body>
    <h1>AI Generated Content</h1>
    <p>User request: ${input}</p>
    <p>AI response: ${result.text.substring(0, 200)}...</p>
</body>
</html>`;

  await sandbox.files.write("index.html", exampleContent);
  agentState.files["index.html"] = exampleContent;

  // Get sandbox URL
  const host = sandbox.getHost(3000);
  const sandboxUrl = `https://${host}`;

  // Determine if there was an error
  const isError =
    !agentState.summary || Object.keys(agentState.files).length === 0;

  // Save result to database
  if (isError) {
    await prisma.message.create({
      data: {
        projectId,
        content: "Something went wrong. Please try again later.",
        role: "ASSISTANT",
        type: "ERROR",
      },
    });
  }

  await prisma.message.create({
    data: {
      projectId,
      content: agentState.summary || "Task completed",
      role: "ASSISTANT",
      type: "RESULT",
      fragment: {
        create: {
          sandboxUrl: sandboxUrl,
          title: "Fragment",
          files: agentState.files,
        },
      },
    },
  });

  return {
    url: sandboxUrl,
    title: "Fragment",
    files: agentState.files,
    summary: agentState.summary || "Task completed",
  };
}